{
  "address": "0x1a9ffA3a1a8Eb3a833F7b4FAA118A10aDD3A5217",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "adr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "contract IEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x95893a216c5bfb493d86f33cc804a4d9d5b4370a4154b0b6b3437039d1f2720c",
  "receipt": {
    "to": null,
    "from": "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "contractAddress": "0x1a9ffA3a1a8Eb3a833F7b4FAA118A10aDD3A5217",
    "transactionIndex": 85,
    "gasUsed": "164396",
    "logsBloom": "0x
    "blockHash": "0x29b8f253cbde884a5184e32972892da553cf0997e6e28fe2160fdc559fb8b382",
    "transactionHash": "0x95893a216c5bfb493d86f33cc804a4d9d5b4370a4154b0b6b3437039d1f2720c",
    "logs": [],
    "blockNumber": 8224177,
    "cumulativeGasUsed": "10938829",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2968B0d0514c15Fc39880846EF9A3F161BabC61f"
  ],
  "numDeployments": 1,
  "solcInputHash": "9eccd3811b40a4252d0b0801af3831e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"contract IEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/motorbikeAttacker.sol\":\"Upgraderaddress\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/motorbikeAttacker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//Implemntation\\n//0x2968B0d0514c15Fc39880846EF9A3F161BabC61f\\n\\ninterface IEngine {\\n    function upgrader() external view returns (address);\\n}\\n\\ncontract Upgraderaddress {\\n    address public upgrder;\\n    IEngine public target;\\n    constructor(address _target) {\\n        target=IEngine(_target);\\n    }\\n\\n    function adr() public {\\n        upgrder = target.upgrader();\\n    }\\n}\\n\",\"keccak256\":\"0xadaf635d2daa88d93c7fa076a14e6c7add317024afc0b70a63fb98964d50eb17\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161022438038061022483398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610191806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630aca7f9514610046578063c4649ad614610050578063d4b839921461007f575b600080fd5b61004e610092565b005b600054610063906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610063906001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b031663af2697456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610109919061012b565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561013d57600080fd5b81516001600160a01b038116811461015457600080fd5b939250505056fea2646970667358221220871dde40db2382776eb88a834e01a470a1ef1ffc42b999caa543c444c24f7ff664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630aca7f9514610046578063c4649ad614610050578063d4b839921461007f575b600080fd5b61004e610092565b005b600054610063906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610063906001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b031663af2697456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610109919061012b565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561013d57600080fd5b81516001600160a01b038116811461015457600080fd5b939250505056fea2646970667358221220871dde40db2382776eb88a834e01a470a1ef1ffc42b999caa543c444c24f7ff664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/motorbikeAttacker.sol:Upgraderaddress",
        "label": "upgrder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 191,
        "contract": "contracts/motorbikeAttacker.sol:Upgraderaddress",
        "label": "target",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IEngine)186"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IEngine)186": {
        "encoding": "inplace",
        "label": "contract IEngine",
        "numberOfBytes": "20"
      }
    }
  }
}